/**
 * @license
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { z } from 'zod';
/**
 * Zod schema for validating a cursor position.
 */
export declare const CursorSchema: z.ZodObject<{
    line: z.ZodNumber;
    character: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    line: number;
    character: number;
}, {
    line: number;
    character: number;
}>;
export type Cursor = z.infer<typeof CursorSchema>;
/**
 * Zod schema for validating an active file context from the IDE.
 */
export declare const OpenFilesSchema: z.ZodObject<{
    activeFile: z.ZodString;
    selectedText: z.ZodOptional<z.ZodString>;
    cursor: z.ZodOptional<z.ZodObject<{
        line: z.ZodNumber;
        character: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        line: number;
        character: number;
    }, {
        line: number;
        character: number;
    }>>;
    recentOpenFiles: z.ZodOptional<z.ZodArray<z.ZodObject<{
        filePath: z.ZodString;
        timestamp: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        filePath: string;
        timestamp: number;
    }, {
        filePath: string;
        timestamp: number;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    activeFile: string;
    cursor?: {
        line: number;
        character: number;
    } | undefined;
    selectedText?: string | undefined;
    recentOpenFiles?: {
        filePath: string;
        timestamp: number;
    }[] | undefined;
}, {
    activeFile: string;
    cursor?: {
        line: number;
        character: number;
    } | undefined;
    selectedText?: string | undefined;
    recentOpenFiles?: {
        filePath: string;
        timestamp: number;
    }[] | undefined;
}>;
export type OpenFiles = z.infer<typeof OpenFilesSchema>;
/**
 * Zod schema for validating the 'ide/openFilesChanged' notification from the IDE.
 */
export declare const OpenFilesNotificationSchema: z.ZodObject<{
    method: z.ZodLiteral<"ide/openFilesChanged">;
    params: z.ZodObject<{
        activeFile: z.ZodString;
        selectedText: z.ZodOptional<z.ZodString>;
        cursor: z.ZodOptional<z.ZodObject<{
            line: z.ZodNumber;
            character: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            line: number;
            character: number;
        }, {
            line: number;
            character: number;
        }>>;
        recentOpenFiles: z.ZodOptional<z.ZodArray<z.ZodObject<{
            filePath: z.ZodString;
            timestamp: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            filePath: string;
            timestamp: number;
        }, {
            filePath: string;
            timestamp: number;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        activeFile: string;
        cursor?: {
            line: number;
            character: number;
        } | undefined;
        selectedText?: string | undefined;
        recentOpenFiles?: {
            filePath: string;
            timestamp: number;
        }[] | undefined;
    }, {
        activeFile: string;
        cursor?: {
            line: number;
            character: number;
        } | undefined;
        selectedText?: string | undefined;
        recentOpenFiles?: {
            filePath: string;
            timestamp: number;
        }[] | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    method: "ide/openFilesChanged";
    params: {
        activeFile: string;
        cursor?: {
            line: number;
            character: number;
        } | undefined;
        selectedText?: string | undefined;
        recentOpenFiles?: {
            filePath: string;
            timestamp: number;
        }[] | undefined;
    };
}, {
    method: "ide/openFilesChanged";
    params: {
        activeFile: string;
        cursor?: {
            line: number;
            character: number;
        } | undefined;
        selectedText?: string | undefined;
        recentOpenFiles?: {
            filePath: string;
            timestamp: number;
        }[] | undefined;
    };
}>;
type OpenFilesSubscriber = (openFiles: OpenFiles | undefined) => void;
/**
 * Creates a new store for managing the IDE's active file context.
 * This factory function encapsulates the state and logic, allowing for the creation
 * of isolated instances, which is particularly useful for testing.
 *
 * @returns An object with methods to interact with the active file context.
 */
export declare function createIdeContextStore(): {
    setOpenFilesContext: (newOpenFiles: OpenFiles) => void;
    getOpenFilesContext: () => OpenFiles | undefined;
    subscribeToOpenFiles: (subscriber: OpenFilesSubscriber) => () => void;
    clearOpenFilesContext: () => void;
};
/**
 * The default, shared instance of the IDE context store for the application.
 */
export declare const ideContext: {
    setOpenFilesContext: (newOpenFiles: OpenFiles) => void;
    getOpenFilesContext: () => OpenFiles | undefined;
    subscribeToOpenFiles: (subscriber: OpenFilesSubscriber) => () => void;
    clearOpenFilesContext: () => void;
};
export {};
