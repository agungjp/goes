/**
 * @license
 * Copyright 2025 Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
import { ideContext, OpenFilesNotificationSchema } from '../ide/ideContext.js';
import { Client } from '@modelcontextprotocol/sdk/client/index.js';
import { StreamableHTTPClientTransport } from '@modelcontextprotocol/sdk/client/streamableHttp.js';
const logger = {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    debug: (...args) => console.debug('[DEBUG] [ImportProcessor]', ...args),
};
export var IDEConnectionStatus;
(function (IDEConnectionStatus) {
    IDEConnectionStatus["Connected"] = "connected";
    IDEConnectionStatus["Disconnected"] = "disconnected";
    IDEConnectionStatus["Connecting"] = "connecting";
})(IDEConnectionStatus || (IDEConnectionStatus = {}));
/**
 * Manages the connection to and interaction with the IDE server.
 */
export class IdeClient {
    client = undefined;
    connectionStatus = IDEConnectionStatus.Disconnected;
    constructor() {
        this.connectToMcpServer().catch((err) => {
            logger.debug('Failed to initialize IdeClient:', err);
        });
    }
    getConnectionStatus() {
        let details;
        if (this.connectionStatus === IDEConnectionStatus.Disconnected) {
            if (!process.env['GEMINI_CLI_IDE_SERVER_PORT']) {
                details = 'GEMINI_CLI_IDE_SERVER_PORT environment variable is not set.';
            }
        }
        return {
            status: this.connectionStatus,
            details,
        };
    }
    async connectToMcpServer() {
        this.connectionStatus = IDEConnectionStatus.Connecting;
        const idePort = process.env['GEMINI_CLI_IDE_SERVER_PORT'];
        if (!idePort) {
            logger.debug('Unable to connect to IDE mode MCP server. GEMINI_CLI_IDE_SERVER_PORT environment variable is not set.');
            this.connectionStatus = IDEConnectionStatus.Disconnected;
            return;
        }
        try {
            this.client = new Client({
                name: 'streamable-http-client',
                // TODO(#3487): use the CLI version here.
                version: '1.0.0',
            });
            const transport = new StreamableHTTPClientTransport(new URL(`http://localhost:${idePort}/mcp`));
            await this.client.connect(transport);
            this.client.setNotificationHandler(OpenFilesNotificationSchema, (notification) => {
                ideContext.setOpenFilesContext(notification.params);
            });
            this.client.onerror = (error) => {
                logger.debug('IDE MCP client error:', error);
                this.connectionStatus = IDEConnectionStatus.Disconnected;
                ideContext.clearOpenFilesContext();
            };
            this.client.onclose = () => {
                logger.debug('IDE MCP client connection closed.');
                this.connectionStatus = IDEConnectionStatus.Disconnected;
                ideContext.clearOpenFilesContext();
            };
            this.connectionStatus = IDEConnectionStatus.Connected;
        }
        catch (error) {
            this.connectionStatus = IDEConnectionStatus.Disconnected;
            logger.debug('Failed to connect to MCP server:', error);
        }
    }
}
//# sourceMappingURL=ide-client.js.map